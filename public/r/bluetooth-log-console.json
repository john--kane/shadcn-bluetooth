{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bluetooth-log-console",
  "type": "registry:component",
  "title": "Bluetooth Log Console",
  "description": "Display a log console of bluetooth device information.",
  "registryDependencies": [
    "card",
    "scroll-area",
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/bluetooth/bluetooth-log-console.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/registry/new-york/ui/card\";\nimport { ScrollArea } from \"@/registry/new-york/ui/scroll-area\";\nimport { AlertCircle, Battery, Bluetooth, BluetoothConnected, BluetoothOff, Info, RefreshCw, Trash2, Wifi } from \"lucide-react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { BluetoothDevice, BluetoothManager, Characteristic, Service } from \"./utils\";\n\ntype LogType = \"info\" | \"error\" | \"data\" | \"event\" | \"connection\" | \"service\" | \"characteristic\" | \"connectionError\" | \"serviceError\" | \"characteristicError\" | \"scanError\" | \"disconnectError\" | \"removeError\";\n\ninterface LogEntry {\n  timestamp: string;\n  type: LogType;\n  message: string;\n  data?: any;\n}\n\nexport function BluetoothLogConsole() {\n  const [logs, setLogs] = useState<LogEntry[]>([]);\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const bluetoothManager = BluetoothManager.getInstance();\n\n  const addLog = (type: LogEntry[\"type\"], message: string, data?: any) => {\n    const timestamp = new Date().toLocaleTimeString();\n    console.log(\"Adding log:\", { timestamp, type, message, data });\n    setLogs(prev => [...prev, { timestamp, type, message, data }]);\n  };\n\n  useEffect(() => {\n    const handleDevicesChanged = (devices: BluetoothDevice[]) => {\n      addLog(\"event\", \"Devices list updated\", devices);\n    };\n\n    const handleDeviceConnected = (device: BluetoothDevice) => {\n      addLog(\"connection\", `Device connected: ${device.name || device.id}`, device);\n    };\n\n    const handleDeviceDisconnected = (device: BluetoothDevice) => {\n      addLog(\"connection\", `Device disconnected: ${device.name || device.id}`, device);\n    };\n\n    const handleError = (error: Error) => {\n      addLog(\"error\", error.message, error);\n    };\n\n    const handleScanError = (error: Error) => {\n      addLog(\"scanError\", `Scan error: ${error.message}`, error);\n    };\n\n    const handleConnectError = (error: Error) => {\n      addLog(\"connectionError\", `Connection error: ${error.message}`, error);\n    };\n\n    const handleDisconnectError = (error: Error) => {\n      addLog(\"disconnectError\", `Disconnection error: ${error.message}`, error);\n    };\n\n    const handleRemoveError = (error: Error) => {\n      addLog(\"removeError\", `Remove error: ${error.message}`, error);\n    };\n\n    const handleServiceDiscovered = (service: Service) => {\n      addLog(\"service\", `Service discovered: ${service.name}`, service);\n    };\n\n    const handleCharacteristicRead = (characteristic: Characteristic) => {\n      addLog(\"characteristic\", `Characteristic read: ${characteristic.name}`, characteristic);\n    };\n\n    const handleCharacteristicWrite = (characteristic: Characteristic) => {\n      addLog(\"characteristic\", `Characteristic write: ${characteristic.name}`, characteristic);\n    };\n\n    const handleServiceError = (error: Error) => {\n      addLog(\"serviceError\", `Service error: ${error.message}`, error);\n    };\n\n    const handleCharacteristicError = (error: Error) => {\n      addLog(\"characteristicError\", `Characteristic error: ${error.message}`, error);\n    };\n\n    bluetoothManager.addListener('devicesChanged', handleDevicesChanged);\n    bluetoothManager.addListener('deviceConnected', handleDeviceConnected);\n    bluetoothManager.addListener('deviceDisconnected', handleDeviceDisconnected);\n    bluetoothManager.addListener('error', handleError);\n    bluetoothManager.addListener('scanError', handleScanError);\n    bluetoothManager.addListener('connectError', handleConnectError);\n    bluetoothManager.addListener('disconnectError', handleDisconnectError);\n    bluetoothManager.addListener('removeError', handleRemoveError);\n    bluetoothManager.addListener('serviceDiscovered', handleServiceDiscovered);\n    bluetoothManager.addListener('characteristicRead', handleCharacteristicRead);\n    bluetoothManager.addListener('characteristicWrite', handleCharacteristicWrite);\n    bluetoothManager.addListener('serviceError', handleServiceError);\n    bluetoothManager.addListener('characteristicError', handleCharacteristicError);\n\n    return () => {\n      bluetoothManager.removeListener('devicesChanged', handleDevicesChanged);\n      bluetoothManager.removeListener('deviceConnected', handleDeviceConnected);\n      bluetoothManager.removeListener('deviceDisconnected', handleDeviceDisconnected);\n      bluetoothManager.removeListener('error', handleError);\n      bluetoothManager.removeListener('scanError', handleScanError);\n      bluetoothManager.removeListener('connectError', handleConnectError);\n      bluetoothManager.removeListener('disconnectError', handleDisconnectError);\n      bluetoothManager.removeListener('removeError', handleRemoveError);\n      bluetoothManager.removeListener('serviceDiscovered', handleServiceDiscovered);\n      bluetoothManager.removeListener('characteristicRead', handleCharacteristicRead);\n      bluetoothManager.removeListener('characteristicWrite', handleCharacteristicWrite);\n      bluetoothManager.removeListener('serviceError', handleServiceError);\n      bluetoothManager.removeListener('characteristicError', handleCharacteristicError);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isAutoScroll && scrollAreaRef.current) {\n      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;\n    }\n  }, [logs, isAutoScroll]);\n\n  const clearLogs = () => {\n    setLogs([]);\n  };\n\n  const getLogColor = (type: LogEntry[\"type\"]) => {\n    switch (type) {\n      case \"error\":\n      case \"connectionError\":\n      case \"serviceError\":\n      case \"characteristicError\":\n      case \"scanError\":\n      case \"disconnectError\":\n      case \"removeError\":\n        return \"text-red-500\";\n      case \"info\":\n        return \"text-blue-500\";\n      case \"data\":\n        return \"text-green-500\";\n      case \"event\":\n        return \"text-purple-500\";\n      case \"connection\":\n        return \"text-orange-500\";\n      case \"service\":\n        return \"text-indigo-500\";\n      case \"characteristic\":\n        return \"text-teal-500\";\n      default:\n        return \"text-foreground\";\n    }\n  };\n\n  const getLogIcon = (type: LogEntry[\"type\"]) => {\n    switch (type) {\n      case \"error\":\n      case \"connectionError\":\n      case \"serviceError\":\n      case \"characteristicError\":\n      case \"scanError\":\n      case \"disconnectError\":\n      case \"removeError\":\n        return <AlertCircle className=\"h-4 w-4\" />;\n      case \"info\":\n        return <Info className=\"h-4 w-4\" />;\n      case \"data\":\n        return <BluetoothConnected className=\"h-4 w-4\" />;\n      case \"event\":\n        return <Bluetooth className=\"h-4 w-4\" />;\n      case \"connection\":\n        return <Wifi className=\"h-4 w-4\" />;\n      case \"service\":\n        return <Battery className=\"h-4 w-4\" />;\n      case \"characteristic\":\n        return <BluetoothOff className=\"h-4 w-4\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">Bluetooth Log Console</CardTitle>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsAutoScroll(!isAutoScroll)}\n            className={isAutoScroll ? \"text-blue-500\" : \"\"}\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={clearLogs}\n            className=\"text-red-500 hover:text-red-700\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ScrollArea\n          ref={scrollAreaRef}\n          className=\"h-[300px] rounded-md border p-4 font-mono text-sm\"\n        >\n          {logs.map((log, index) => (\n            <div key={index} className=\"flex items-start gap-2 py-1\">\n              <span className=\"text-muted-foreground\">{log.timestamp}</span>\n              <span className={getLogColor(log.type)}>\n                {getLogIcon(log.type)}\n              </span>\n              <span className={getLogColor(log.type)}>{log.message}</span>\n              {log.data && (\n                <pre className=\"text-muted-foreground\">\n                  {JSON.stringify(log.data, null, 2)}\n                </pre>\n              )}\n            </div>\n          ))}\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n} ",
      "type": "registry:component"
    }
  ]
}