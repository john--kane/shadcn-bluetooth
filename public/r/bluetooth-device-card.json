{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bluetooth-device-card",
  "type": "registry:component",
  "title": "Bluetooth Device Card",
  "description": "Display a card of bluetooth device information.",
  "registryDependencies": [
    "button",
    "progress",
    "tooltip"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/bluetooth/bluetooth-device-card.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { BluetoothManager, BluetoothDevice, DeviceInformation } from \"./utils\";\nimport { Battery, ChevronDown, ChevronUp, Info, RefreshCw, Trash2, Wifi, WifiOff } from \"lucide-react\";\nimport { Progress } from \"@/registry/new-york/ui/progress\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/new-york/ui/tooltip\";\nimport { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from \"@radix-ui/react-accordion\";\nimport { BluetoothStatus } from \"./bluetooth-status\";\n\ninterface BluetoothDeviceCardProps {\n  device: BluetoothDevice;\n  onDeviceSelected?: (device: BluetoothDevice) => void;\n  onDeviceRemoved?: (device: BluetoothDevice) => void;\n  onError?: (error: Error) => void;\n}\n\nexport function BluetoothDeviceCard({\n  device,\n  onDeviceSelected,\n  onDeviceRemoved,\n  onError\n}: BluetoothDeviceCardProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [deviceInfo, setDeviceInfo] = useState<DeviceInformation | null>(null);\n  const [batteryLevel, setBatteryLevel] = useState<number | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingState, setLoadingState] = useState<{\n    deviceInfo: boolean;\n    battery: boolean;\n    characteristics: boolean;\n  }>({\n    deviceInfo: false,\n    battery: false,\n    characteristics: false\n  });\n  const bluetoothManager = BluetoothManager.getInstance();\n  const [subscribedCharacteristics, setSubscribedCharacteristics] = useState<Set<string>>(new Set());\n  const [lastUpdateTime, setLastUpdateTime] = useState<Date | null>(null);\n  const [errorState, setErrorState] = useState<{\n    deviceInfo: string | null;\n    battery: string | null;\n    characteristics: string | null;\n  }>({\n    deviceInfo: null,\n    battery: null,\n    characteristics: null\n  });\n\n  const isGattError = (error: any): boolean => {\n    return error instanceof Error &&\n      (error.message.includes('GATT operation already in progress') ||\n        error.message.includes('GATT Server is disconnected'));\n  };\n\n  const retryOperation = async <T,>(\n    operation: () => Promise<T>,\n    maxRetries: number = 3,\n    delay: number = 1000\n  ): Promise<T> => {\n    let lastError: Error | null = null;\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error('Unknown error');\n        if (!isGattError(error) || i === maxRetries - 1) {\n          throw lastError;\n        }\n        await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));\n      }\n    }\n    throw lastError;\n  };\n\n  // Load device information when device is connected\n  useEffect(() => {\n    const loadDeviceInfo = async () => {\n      if (device.isConnected && (!deviceInfo || !lastUpdateTime || Date.now() - lastUpdateTime.getTime() > 30000)) {\n        setIsLoading(true);\n        setLoadingState({\n          deviceInfo: true,\n          battery: true,\n          characteristics: true\n        });\n\n        try {\n          // Read all characteristics first\n          await retryOperation(async () => {\n            setLoadingState(prev => ({ ...prev, characteristics: true }));\n            await bluetoothManager.readAllCharacteristics(device);\n            setLoadingState(prev => ({ ...prev, characteristics: false }));\n          });\n\n          // Then get the specific information we want to display\n          const [info, battery] = await Promise.all([\n            retryOperation(async () => {\n              setLoadingState(prev => ({ ...prev, deviceInfo: true }));\n              const result = await bluetoothManager.readDeviceInformation(device);\n              setLoadingState(prev => ({ ...prev, deviceInfo: false }));\n              return result;\n            }),\n            retryOperation(async () => {\n              setLoadingState(prev => ({ ...prev, battery: true }));\n              const result = await bluetoothManager.readBatteryLevel(device);\n              setLoadingState(prev => ({ ...prev, battery: false }));\n              return result;\n            })\n          ]);\n\n          setDeviceInfo(info);\n          setBatteryLevel(battery);\n          setLastUpdateTime(new Date());\n          setErrorState({\n            deviceInfo: null,\n            battery: null,\n            characteristics: null\n          });\n        } catch (error) {\n          console.error('Failed to load device information:', error);\n          if (isGattError(error)) {\n            setErrorState({\n              deviceInfo: 'GATT operation failed. Please try again.',\n              battery: 'GATT operation failed. Please try again.',\n              characteristics: 'GATT operation failed. Please try again.'\n            });\n          } else {\n            onError?.(error instanceof Error ? error : new Error('Failed to load device information'));\n          }\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    loadDeviceInfo();\n  }, [device.isConnected, device.id]);\n\n  const refreshDeviceInfo = async () => {\n    if (!device.gatt) return;\n\n    setIsLoading(true);\n    setLoadingState({\n      deviceInfo: true,\n      battery: true,\n      characteristics: true\n    });\n\n    try {\n      // Read all characteristics first\n      await retryOperation(async () => {\n        setLoadingState(prev => ({ ...prev, characteristics: true }));\n        await bluetoothManager.readAllCharacteristics(device);\n        setLoadingState(prev => ({ ...prev, characteristics: false }));\n      });\n\n      // Then get the specific information we want to display\n      const [info, battery] = await Promise.all([\n        retryOperation(async () => {\n          setLoadingState(prev => ({ ...prev, deviceInfo: true }));\n          const result = await bluetoothManager.readDeviceInformation(device);\n          setLoadingState(prev => ({ ...prev, deviceInfo: false }));\n          return result;\n        }),\n        retryOperation(async () => {\n          setLoadingState(prev => ({ ...prev, battery: true }));\n          const result = await bluetoothManager.readBatteryLevel(device);\n          setLoadingState(prev => ({ ...prev, battery: false }));\n          return result;\n        })\n      ]);\n\n      setDeviceInfo(info);\n      setBatteryLevel(battery);\n      setLastUpdateTime(new Date());\n      setErrorState({\n        deviceInfo: null,\n        battery: null,\n        characteristics: null\n      });\n    } catch (error) {\n      console.error('Failed to refresh device information:', error);\n      if (isGattError(error)) {\n        setErrorState({\n          deviceInfo: 'GATT operation failed. Please try again.',\n          battery: 'GATT operation failed. Please try again.',\n          characteristics: 'GATT operation failed. Please try again.'\n        });\n      } else {\n        onError?.(error instanceof Error ? error : new Error('Failed to refresh device information'));\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleConnect = async () => {\n    try {\n      await bluetoothManager.connectToDevice(device.id);\n      onDeviceSelected?.(device);\n      // Device info will be loaded automatically by the useEffect\n    } catch (error) {\n      onError?.(error instanceof Error ? error : new Error('Failed to connect to device'));\n    }\n  };\n\n  const handleDisconnect = async () => {\n    try {\n      await bluetoothManager.disconnectDevice(device.id);\n      // Only refresh the specific device that was disconnected\n      await bluetoothManager.refreshDevices(device.id);\n    } catch (error) {\n      onError?.(error instanceof Error ? error : new Error('Failed to disconnect device'));\n    }\n  };\n\n  const handleRemove = async () => {\n    try {\n      await bluetoothManager.removeDevice(device.id);\n      onDeviceRemoved?.(device);\n    } catch (error) {\n      onError?.(error instanceof Error ? error : new Error('Failed to remove device'));\n    }\n  };\n\n  const isSubscribed = (serviceUuid: string, characteristicUuid: string) => {\n    return subscribedCharacteristics.has(`${serviceUuid}-${characteristicUuid}`);\n  };\n\n  const handleReadCharacteristic = async (serviceUuid: string, characteristicUuid: string) => {\n    if (!device.gatt) return;\n    try {\n      const value = await bluetoothManager.readCharacteristic(device, serviceUuid, characteristicUuid);\n      console.log(`Read value from ${characteristicUuid}:`, value);\n      // Update the UI with the new value\n      refreshDeviceInfo();\n    } catch (error) {\n      console.error('Failed to read characteristic:', error);\n      onError?.(error instanceof Error ? error : new Error('Failed to read characteristic'));\n    }\n  };\n\n  const handleWriteCharacteristic = async (serviceUuid: string, characteristicUuid: string) => {\n    if (!device.gatt) return;\n    try {\n      // TODO: Implement write dialog\n      console.log('Write to characteristic:', characteristicUuid);\n    } catch (error) {\n      console.error('Failed to write characteristic:', error);\n      onError?.(error instanceof Error ? error : new Error('Failed to write characteristic'));\n    }\n  };\n\n  const handleToggleNotifications = async (serviceUuid: string, characteristicUuid: string) => {\n    if (!device.gatt) return;\n    try {\n      const key = `${serviceUuid}-${characteristicUuid}`;\n      if (isSubscribed(serviceUuid, characteristicUuid)) {\n        await bluetoothManager.stopNotifications(device, serviceUuid, characteristicUuid);\n        setSubscribedCharacteristics(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(key);\n          return newSet;\n        });\n      } else {\n        await bluetoothManager.startNotifications(device, serviceUuid, characteristicUuid);\n        setSubscribedCharacteristics(prev => {\n          const newSet = new Set(prev);\n          newSet.add(key);\n          return newSet;\n        });\n      }\n    } catch (error) {\n      console.error('Failed to toggle notifications:', error);\n      onError?.(error instanceof Error ? error : new Error('Failed to toggle notifications'));\n    }\n  };\n\n  const getPropertyDescription = (prop: string): string => {\n    switch (prop.toLowerCase()) {\n      case 'read':\n        return 'This characteristic can be read';\n      case 'write':\n        return 'This characteristic can be written to';\n      case 'notify':\n        return 'This characteristic can send notifications';\n      case 'indicate':\n        return 'This characteristic can send indications';\n      case 'broadcast':\n        return 'This characteristic can broadcast';\n      case 'writewithoutresponse':\n        return 'This characteristic can be written to without response';\n      case 'authenticatedsignedwrites':\n        return 'This characteristic supports authenticated signed writes';\n      case 'extendedproperties':\n        return 'This characteristic has extended properties';\n      default:\n        return prop;\n    }\n  };\n\n  const formatCharacteristicValue = (value: DataView): string => {\n    try {\n      // Try to decode as UTF-8 text first\n      const text = new TextDecoder().decode(value);\n      if (text && !text.includes('\\u0000')) {\n        return text;\n      }\n    } catch (e) {\n      // If text decoding fails, try other formats\n    }\n\n    // If it's a single byte value (like battery level)\n    if (value.byteLength === 1) {\n      return value.getUint8(0).toString();\n    }\n\n    // If it's a 16-bit value\n    if (value.byteLength === 2) {\n      return value.getUint16(0, true).toString();\n    }\n\n    // If it's a 32-bit value\n    if (value.byteLength === 4) {\n      return value.getUint32(0, true).toString();\n    }\n\n    // If all else fails, show as hex\n    const bytes = new Uint8Array(value.buffer);\n    return Array.from(bytes)\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join(' ');\n  };\n\n  return (\n    <div className=\"flex flex-col space-y-2 p-4 border-b last:border-b-0\">\n      <div className=\"flex items-center justify-between space-y-2\">\n        <div className=\"flex flex-col items-start gap-1\">\n          <span className=\"font-medium\">\n            {device.name || 'Unknown Device'}\n          </span>\n          <span className=\"text-xs text-muted-foreground font-mono\">\n            {device.id}\n          </span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          \n\n          <BluetoothStatus  device={device}/>\n\n          {!device.isConnected && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={async () => {\n                try {\n                  await handleConnect();\n                  setIsExpanded(true);\n                } catch (error) {\n                  console.error('Failed to connect to device:', error);\n                }\n              }}\n              className=\"text-green-500 hover:text-green-700\"\n            >\n              <Wifi className=\"h-4 w-4\" />\n              <span>Connect</span>\n            </Button>\n          )}\n\n\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                {device.isConnected ? (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleDisconnect}\n                    className=\"text-red-500 hover:text-red-700\"\n                  >\n                    <WifiOff className=\"h-4 w-4\" />\n                    <span>Disconnect</span>\n                  </Button>\n                ) : (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleRemove}\n                    className=\"text-red-500 hover:text-red-700\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                    {/* <span>Remove</span> */}\n                  </Button>\n                )}\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>{device.isConnected ? 'Disconnect from device' : 'Remove device'}</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n\n          {device.isConnected && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsExpanded(!isExpanded)}\n            >\n              {isExpanded ? (\n                <ChevronUp className=\"h-4 w-4\" />\n              ) : (\n                <ChevronDown className=\"h-4 w-4\" />\n              )}\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {device.isConnected && isExpanded && (\n        <div className=\"space-y-4 pl-4 border-l\">\n          {batteryLevel !== null && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Battery className=\"h-4 w-4\" />\n                <span>Battery Level</span>\n                {loadingState.battery ? (\n                  <div className=\"ml-auto flex items-center gap-2\">\n                    <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                    <span className=\"text-muted-foreground\">Loading...</span>\n                  </div>\n                ) : (\n                  <span className=\"ml-auto font-medium\">{batteryLevel}%</span>\n                )}\n              </div>\n              {errorState.battery && (\n                <div className=\"text-xs text-red-500\">{errorState.battery}</div>\n              )}\n              <Progress value={batteryLevel} className=\"h-2\" />\n            </div>\n          )}\n\n          {deviceInfo && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Info className=\"h-4 w-4\" />\n                <span>Device Details</span>\n                {loadingState.deviceInfo ? (\n                  <div className=\"ml-auto flex items-center gap-2\">\n                    <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                    <span className=\"text-muted-foreground\">Loading...</span>\n                  </div>\n                ) : (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={refreshDeviceInfo}\n                    disabled={isLoading}\n                    className=\"ml-auto\"\n                  >\n                    <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n                  </Button>\n                )}\n              </div>\n              {errorState.deviceInfo && (\n                <div className=\"text-xs text-red-500\">{errorState.deviceInfo}</div>\n              )}\n              {lastUpdateTime && (\n                <div className=\"text-xs text-muted-foreground\">\n                  Last updated: {lastUpdateTime.toLocaleTimeString()}\n                </div>\n              )}\n              <div className=\"grid gap-2 text-sm\">\n                {deviceInfo.manufacturerName && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Manufacturer</span>\n                    <span>{deviceInfo.manufacturerName}</span>\n                  </div>\n                )}\n                {deviceInfo.modelNumber && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Model</span>\n                    <span>{deviceInfo.modelNumber}</span>\n                  </div>\n                )}\n                {deviceInfo.serialNumber && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Serial Number</span>\n                    <span>{deviceInfo.serialNumber}</span>\n                  </div>\n                )}\n                {deviceInfo.hardwareRevision && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Hardware Revision</span>\n                    <span>{deviceInfo.hardwareRevision}</span>\n                  </div>\n                )}\n                {deviceInfo.firmwareRevision && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Firmware Revision</span>\n                    <span>{deviceInfo.firmwareRevision}</span>\n                  </div>\n                )}\n                {deviceInfo.softwareRevision && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Software Revision</span>\n                    <span>{deviceInfo.softwareRevision}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {device.services && device.services.length > 0 && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Info className=\"h-4 w-4\" />\n                <span>Services & Characteristics</span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={refreshDeviceInfo}\n                  disabled={isLoading}\n                  className=\"ml-auto\"\n                >\n                  <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n                </Button>\n              </div>\n              <Accordion type=\"multiple\" className=\"w-full\">\n                {device.services.map((service) => (\n                  <AccordionItem key={service.uuid} value={service.uuid}>\n                    <AccordionTrigger className=\"text-sm py-2\">\n                    <span className=\"cursor-help\">\n                              {bluetoothManager.getServiceName(service.uuid) || service.uuid}\n                            </span>\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      <div className=\"space-y-2 pl-4\">\n                        {service.characteristics.map((char) => (\n                          <div key={char.uuid} className=\"text-sm text-muted-foreground\">\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"cursor-help\">\n                                {bluetoothManager.getCharacteristicName(char.uuid) || char.uuid}\n\n                              </span>\n                              <div className=\"flex items-center gap-2\">\n\n                                <div>\n                                  {bluetoothManager.getCharacteristicValue(char.uuid) ? (\n                                    <div className=\"text-xs text-muted-foreground\">\n                                      {formatCharacteristicValue(bluetoothManager.getCharacteristicValue(char.uuid)!)}\n                                    </div>\n                                  ) : null}\n                                </div>\n                                <div className=\"flex gap-1\">\n                                  {char.properties.map((prop) => (\n                                    <TooltipProvider key={prop}>\n                                      <Tooltip>\n                                        <TooltipTrigger asChild>\n                                          <span\n                                            className=\"px-1 py-0.5 text-xs rounded bg-muted cursor-help\"\n                                          >\n                                            {prop}\n                                          </span>\n                                        </TooltipTrigger>\n                                        <TooltipContent>\n                                          <p>{getPropertyDescription(prop)}</p>\n                                        </TooltipContent>\n                                      </Tooltip>\n                                    </TooltipProvider>\n                                  ))}\n                                </div>\n                                <div className=\"flex gap-1\">\n                                  {char.properties.includes('read') && (\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      className=\"h-6 px-2\"\n                                      onClick={() => handleReadCharacteristic(service.uuid, char.uuid)}\n                                    >\n                                      <RefreshCw className=\"h-4 w-4\" />test\n                                    </Button>\n                                  )}\n                                  {char.properties.includes('write') && (\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      className=\"h-6 px-2\"\n                                      onClick={() => handleWriteCharacteristic(service.uuid, char.uuid)}\n                                    >\n                                      Write\n                                    </Button>\n                                  )}\n                                  {char.properties.includes('notify') && (\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      className=\"h-6 px-2\"\n                                      onClick={() => handleToggleNotifications(service.uuid, char.uuid)}\n                                    >\n                                      {isSubscribed(service.uuid, char.uuid) ? 'Unsubscribe' : 'Subscribe'}\n                                    </Button>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                            {char.value && (\n                              <div className=\"text-xs mt-1 flex items-center gap-2\">\n                                <span>Value:</span>\n                                <code className=\"bg-muted px-2 py-1 rounded\">\n                                  {formatCharacteristicValue(char.value)}\n                                </code>\n                                {char.lastUpdated && (\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    (Updated: {new Date(char.lastUpdated).toLocaleTimeString()})\n                                  </span>\n                                )}\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </AccordionContent>\n                  </AccordionItem>\n                ))}\n              </Accordion>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}