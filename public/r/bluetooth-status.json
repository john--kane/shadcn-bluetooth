{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bluetooth-status",
  "type": "registry:component",
  "title": "Bluetooth Status",
  "description": "Display a status of bluetooth device information.",
  "registryDependencies": [
    "accordion",
    "alert",
    "badge",
    "button",
    "card",
    "input",
    "label",
    "progress",
    "scroll-area",
    "select",
    "tooltip",
    "textarea"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/bluetooth/bluetooth-status.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { BluetoothManager, BluetoothDevice } from \"./utils\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/registry/new-york/ui/tooltip\";\nimport { Bluetooth, BluetoothOff, BluetoothSearching, BluetoothConnected } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ntype SizePreset = 2 | 3 | 4 | 5 | 6 | 8 | 10 | 12;\n\nconst sizeClasses: Record<SizePreset, string> = {\n  2: \"w-2 h-2\",\n  3: \"w-3 h-3\",\n  4: \"w-4 h-4\",\n  5: \"w-5 h-5\",\n  6: \"w-6 h-6\",\n  8: \"w-8 h-8\",\n  10: \"w-10 h-10\",\n  12: \"w-12 h-12\"\n};\n\ninterface BluetoothStatusColors {\n  notAvailable?: string;\n  available?: string;\n  scanning?: string;\n  connected?: string;\n}\n\ninterface BluetoothStatusProps {\n  size?: SizePreset;\n  colors?: BluetoothStatusColors;\n  showLegend?: boolean;\n  device?: BluetoothDevice;\n}\n\nconst defaultColors: BluetoothStatusColors = {\n  notAvailable: \"text-destructive\",\n  available: \"text-blue-300\",\n  scanning: \"text-blue-400\",\n  connected: \"text-green-500\"\n};\n\nconst statusLegend = [\n  { icon: BluetoothOff, color: \"text-destructive\", text: \"Not Available\" },\n  { icon: Bluetooth, color: \"text-blue-300\", text: \"Available\" },\n  { icon: BluetoothSearching, color: \"text-blue-400\", text: \"Scanning\" },\n  { icon: BluetoothConnected, color: \"text-green-500\", text: \"Connected\" }\n];\n\nexport function BluetoothStatus({ \n  size = 4, \n  colors = defaultColors,\n  showLegend = false,\n  device\n}: BluetoothStatusProps) {\n  const [isAvailable, setIsAvailable] = useState<boolean>(false);\n  const [isConnected, setIsConnected] = useState<boolean>(false);\n  const [isScanning, setIsScanning] = useState<boolean>(false);\n\n  const bluetoothManager = BluetoothManager.getInstance();\n\n  useEffect(() => {\n    // Initial status check\n    setIsAvailable(bluetoothManager.isBluetoothAvailable());\n    if (device) {\n      setIsConnected(device.isConnected);\n    } else {\n      const devices = bluetoothManager.getDevices();\n      setIsConnected(devices.some(device => device.isConnected));\n    }\n\n    // Listen for status changes\n    const handleDevicesChanged = (devices: any[]) => {\n      if (device) {\n        const updatedDevice = devices.find(d => d.id === device.id);\n        setIsConnected(updatedDevice?.isConnected ?? false);\n      } else {\n        setIsConnected(devices.some(device => device.isConnected));\n      }\n    };\n\n    const handleDeviceConnected = (connectedDevice: BluetoothDevice) => {\n      if (!device || device.id === connectedDevice.id) {\n        setIsConnected(true);\n      }\n    };\n\n    const handleDeviceDisconnected = (disconnectedDevice: BluetoothDevice) => {\n      if (!device || device.id === disconnectedDevice.id) {\n        setIsConnected(false);\n      }\n    };\n\n    bluetoothManager.addListener('devicesChanged', handleDevicesChanged);\n    bluetoothManager.addListener('deviceConnected', handleDeviceConnected);\n    bluetoothManager.addListener('deviceDisconnected', handleDeviceDisconnected);\n\n    return () => {\n      bluetoothManager.removeListener('devicesChanged', handleDevicesChanged);\n      bluetoothManager.removeListener('deviceConnected', handleDeviceConnected);\n      bluetoothManager.removeListener('deviceDisconnected', handleDeviceDisconnected);\n    };\n  }, [device]);\n\n  // Determine icon and status text based on status\n  const getStatusInfo = () => {\n    if (!isAvailable) return { \n      text: \"Bluetooth not available\",\n      icon: BluetoothOff,\n      className: colors.notAvailable || defaultColors.notAvailable\n    };\n    if (isScanning) return { \n      text: \"Scanning for devices\",\n      icon: BluetoothSearching,\n      className: colors.scanning || defaultColors.scanning\n    };\n    if (isConnected) return { \n      text: device ? \"Device connected\" : \"Connected to device\",\n      icon: BluetoothConnected,\n      className: colors.connected || defaultColors.connected\n    };\n    return { \n      text: device ? \"Device not connected\" : \"Available but not connected\",\n      icon: Bluetooth,\n      className: colors.available || defaultColors.available\n    };\n  };\n\n  const status = getStatusInfo();\n  const Icon = status.icon;\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <div className=\"flex items-center\">\n          <Icon className={cn(sizeClasses[size], status.className)} />\n          </div>\n        </TooltipTrigger>\n        <TooltipContent className={cn(\"space-y-2\", showLegend ? \"py-2\" : \" pb-1\")}>\n          <p className=\"font-medium\">{status.text}</p>\n          {showLegend && (\n            <div className=\"space-y-1\">\n              <p className=\"text-xs text-muted-foreground\">Legend:</p>\n              <div className=\"grid grid-cols-2 gap-1\">\n                {statusLegend.map((item) => {\n                  const Icon = item.icon;\n                  return (\n                    <div key={item.text} className=\"flex items-center gap-1\">\n                      <Icon className={cn(\"w-3 h-3\", item.color)} />\n                      <span className=\"text-xs\">{item.text}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}