{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bluetooth-connection-panel",
  "type": "registry:component",
  "title": "Bluetooth Connection Panel",
  "description": "Display a panel of bluetooth devices and their status.",
  "registryDependencies": [
    "card",
    "scroll-area",
    "button",
    "input",
    "label"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/bluetooth/bluetooth-connection-panel.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/registry/new-york/ui/card\";\nimport { ScrollArea } from \"@/registry/new-york/ui/scroll-area\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { Label } from \"@/registry/new-york/ui/label\";\nimport { BluetoothManager, BluetoothDevice } from \"./utils\";\nimport { RefreshCw } from \"lucide-react\";\n\ninterface Service {\n  uuid: string;\n  name?: string;\n  characteristics: Characteristic[];\n}\n\ninterface Characteristic {\n  uuid: string;\n  name?: string;\n  properties: string[];\n}\n\ninterface BluetoothConnectionPanelProps {\n  device: BluetoothDevice;\n  onError?: (error: Error) => void;\n}\n\nexport function BluetoothConnectionPanel({\n  device,\n  onError\n}: BluetoothConnectionPanelProps) {\n  const [services, setServices] = useState<Service[]>([]);\n  const [selectedService, setSelectedService] = useState<Service | null>(null);\n  const [selectedCharacteristic, setSelectedCharacteristic] = useState<Characteristic | null>(null);\n  const [writeValue, setWriteValue] = useState<string>(\"\");\n  const [readValue, setReadValue] = useState<string>(\"\");\n  const [isReading, setIsReading] = useState(false);\n  const [isWriting, setIsWriting] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const bluetoothManager = BluetoothManager.getInstance();\n\n  useEffect(() => {\n    const loadServices = async () => {\n      try {\n        const deviceServices = await bluetoothManager.discoverServices(device);\n        setServices(deviceServices);\n        if (deviceServices.length > 0) {\n          setSelectedService(deviceServices[0]);\n        }\n      } catch (err) {\n        const error = err instanceof Error ? err : new Error(\"Failed to discover services\");\n        onError?.(error);\n      }\n    };\n\n    if (device.isConnected) {\n      loadServices();\n    }\n  }, [device.id, device.isConnected]);\n\n  const handleRead = async () => {\n    if (!selectedCharacteristic || !selectedService) return;\n\n    try {\n      setIsReading(true);\n      const value = await bluetoothManager.readCharacteristic(\n        device,\n        selectedService.uuid,\n        selectedCharacteristic.uuid\n      );\n      setReadValue(value.toString());\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error(\"Failed to read characteristic\");\n      onError?.(error);\n    } finally {\n      setIsReading(false);\n    }\n  };\n\n  const handleWrite = async () => {\n    if (!selectedCharacteristic || !selectedService || !writeValue) return;\n\n    try {\n      setIsWriting(true);\n      // Write functionality not available in current BluetoothManager\n      setError(new Error(\"Write functionality not implemented\"));\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error(\"Failed to write characteristic\");\n      onError?.(error);\n    } finally {\n      setIsWriting(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-sm font-medium\">\n            {device.name || \"Unknown Device\"}\n          </CardTitle>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setSelectedService(null)}\n            >\n              <RefreshCw className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label>Services</Label>\n            <ScrollArea className=\"h-[200px] rounded-md border p-4\">\n              {services.map((service) => (\n                <div\n                  key={service.uuid}\n                  className={`p-2 rounded-md cursor-pointer ${\n                    selectedService?.uuid === service.uuid\n                      ? \"bg-muted\"\n                      : \"hover:bg-muted/50\"\n                  }`}\n                  onClick={() => setSelectedService(service)}\n                >\n                  <div className=\"font-medium\">{service.name || \"Unknown Service\"}</div>\n                  <div className=\"text-sm text-muted-foreground\">{service.uuid}</div>\n                </div>\n              ))}\n            </ScrollArea>\n          </div>\n\n          {selectedService && (\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Characteristics</Label>\n                <ScrollArea className=\"h-[200px] rounded-md border p-4\">\n                  {selectedService.characteristics.map((characteristic) => (\n                    <div\n                      key={characteristic.uuid}\n                      className={`p-2 rounded-md cursor-pointer ${\n                        selectedCharacteristic?.uuid === characteristic.uuid\n                          ? \"bg-muted\"\n                          : \"hover:bg-muted/50\"\n                      }`}\n                      onClick={() => setSelectedCharacteristic(characteristic)}\n                    >\n                      <div className=\"font-medium\">\n                        {characteristic.name || \"Unknown Characteristic\"}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {characteristic.uuid}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Properties: {characteristic.properties.join(\", \")}\n                      </div>\n                    </div>\n                  ))}\n                </ScrollArea>\n              </div>\n\n              {selectedCharacteristic && (\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Read Value</Label>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        value={readValue}\n                        readOnly\n                        placeholder=\"No value read yet\"\n                      />\n                      <Button\n                        onClick={handleRead}\n                        disabled={isReading || !selectedCharacteristic.properties.includes(\"read\")}\n                      >\n                        {isReading ? \"Reading...\" : \"Read\"}\n                      </Button>\n                    </div>\n                  </div>\n\n                  {selectedCharacteristic.properties.includes(\"write\") && (\n                    <div className=\"space-y-2\">\n                      <Label>Write Value</Label>\n                      <div className=\"flex gap-2\">\n                        <Input\n                          value={writeValue}\n                          onChange={(e) => setWriteValue(e.target.value)}\n                          placeholder=\"Enter value to write\"\n                        />\n                        <Button\n                          onClick={handleWrite}\n                          disabled={isWriting || !writeValue}\n                        >\n                          {isWriting ? \"Writing...\" : \"Write\"}\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n} ",
      "type": "registry:component"
    }
  ]
}