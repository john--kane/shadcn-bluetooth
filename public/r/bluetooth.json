{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bluetooth",
  "type": "registry:component",
  "title": "Bluetooth",
  "description": "A simple bluetooth component",
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label",
    "textarea",
    "badge",
    "scroll-area",
    "select",
    "tooltip"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/bluetooth/bluetooth-connection-panel.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/registry/new-york/ui/card\";\nimport { ScrollArea } from \"@/registry/new-york/ui/scroll-area\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { Label } from \"@/registry/new-york/ui/label\";\nimport { BluetoothManager, BluetoothDevice } from \"./utils\";\nimport { RefreshCw } from \"lucide-react\";\n\ninterface Service {\n  uuid: string;\n  name?: string;\n  characteristics: Characteristic[];\n}\n\ninterface Characteristic {\n  uuid: string;\n  name?: string;\n  properties: string[];\n}\n\ninterface BluetoothConnectionPanelProps {\n  device: BluetoothDevice;\n  onError?: (error: Error) => void;\n}\n\nexport function BluetoothConnectionPanel({\n  device,\n  onError\n}: BluetoothConnectionPanelProps) {\n  const [services, setServices] = useState<Service[]>([]);\n  const [selectedService, setSelectedService] = useState<Service | null>(null);\n  const [selectedCharacteristic, setSelectedCharacteristic] = useState<Characteristic | null>(null);\n  const [writeValue, setWriteValue] = useState<string>(\"\");\n  const [readValue, setReadValue] = useState<string>(\"\");\n  const [isReading, setIsReading] = useState(false);\n  const [isWriting, setIsWriting] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const bluetoothManager = BluetoothManager.getInstance();\n\n  useEffect(() => {\n    const loadServices = async () => {\n      try {\n        const deviceServices = await bluetoothManager.discoverServices(device);\n        setServices(deviceServices);\n        if (deviceServices.length > 0) {\n          setSelectedService(deviceServices[0]);\n        }\n      } catch (err) {\n        const error = err instanceof Error ? err : new Error(\"Failed to discover services\");\n        onError?.(error);\n      }\n    };\n\n    if (device.isConnected) {\n      loadServices();\n    }\n  }, [device.id, device.isConnected]);\n\n  const handleRead = async () => {\n    if (!selectedCharacteristic || !selectedService) return;\n\n    try {\n      setIsReading(true);\n      const value = await bluetoothManager.readCharacteristic(\n        device,\n        selectedService.uuid,\n        selectedCharacteristic.uuid\n      );\n      setReadValue(value.toString());\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error(\"Failed to read characteristic\");\n      onError?.(error);\n    } finally {\n      setIsReading(false);\n    }\n  };\n\n  const handleWrite = async () => {\n    if (!selectedCharacteristic || !selectedService || !writeValue) return;\n\n    try {\n      setIsWriting(true);\n      // Write functionality not available in current BluetoothManager\n      setError(new Error(\"Write functionality not implemented\"));\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error(\"Failed to write characteristic\");\n      onError?.(error);\n    } finally {\n      setIsWriting(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-sm font-medium\">\n            {device.name || \"Unknown Device\"}\n          </CardTitle>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setSelectedService(null)}\n            >\n              <RefreshCw className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label>Services</Label>\n            <ScrollArea className=\"h-[200px] rounded-md border p-4\">\n              {services.map((service) => (\n                <div\n                  key={service.uuid}\n                  className={`p-2 rounded-md cursor-pointer ${\n                    selectedService?.uuid === service.uuid\n                      ? \"bg-muted\"\n                      : \"hover:bg-muted/50\"\n                  }`}\n                  onClick={() => setSelectedService(service)}\n                >\n                  <div className=\"font-medium\">{service.name || \"Unknown Service\"}</div>\n                  <div className=\"text-sm text-muted-foreground\">{service.uuid}</div>\n                </div>\n              ))}\n            </ScrollArea>\n          </div>\n\n          {selectedService && (\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Characteristics</Label>\n                <ScrollArea className=\"h-[200px] rounded-md border p-4\">\n                  {selectedService.characteristics.map((characteristic) => (\n                    <div\n                      key={characteristic.uuid}\n                      className={`p-2 rounded-md cursor-pointer ${\n                        selectedCharacteristic?.uuid === characteristic.uuid\n                          ? \"bg-muted\"\n                          : \"hover:bg-muted/50\"\n                      }`}\n                      onClick={() => setSelectedCharacteristic(characteristic)}\n                    >\n                      <div className=\"font-medium\">\n                        {characteristic.name || \"Unknown Characteristic\"}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {characteristic.uuid}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Properties: {characteristic.properties.join(\", \")}\n                      </div>\n                    </div>\n                  ))}\n                </ScrollArea>\n              </div>\n\n              {selectedCharacteristic && (\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Read Value</Label>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        value={readValue}\n                        readOnly\n                        placeholder=\"No value read yet\"\n                      />\n                      <Button\n                        onClick={handleRead}\n                        disabled={isReading || !selectedCharacteristic.properties.includes(\"read\")}\n                      >\n                        {isReading ? \"Reading...\" : \"Read\"}\n                      </Button>\n                    </div>\n                  </div>\n\n                  {selectedCharacteristic.properties.includes(\"write\") && (\n                    <div className=\"space-y-2\">\n                      <Label>Write Value</Label>\n                      <div className=\"flex gap-2\">\n                        <Input\n                          value={writeValue}\n                          onChange={(e) => setWriteValue(e.target.value)}\n                          placeholder=\"Enter value to write\"\n                        />\n                        <Button\n                          onClick={handleWrite}\n                          disabled={isWriting || !writeValue}\n                        >\n                          {isWriting ? \"Writing...\" : \"Write\"}\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n} ",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/bluetooth/bluetooth-device-card.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { BluetoothManager, BluetoothDevice, DeviceInformation } from \"./utils\";\nimport { Battery, ChevronDown, ChevronUp, Info, RefreshCw, Trash2, Wifi, WifiOff } from \"lucide-react\";\nimport { Progress } from \"@/registry/new-york/ui/progress\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/new-york/ui/tooltip\";\nimport { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from \"@radix-ui/react-accordion\";\nimport { BluetoothStatus } from \"./bluetooth-status\";\n\ninterface BluetoothDeviceCardProps {\n  device: BluetoothDevice;\n  onDeviceSelected?: (device: BluetoothDevice) => void;\n  onDeviceRemoved?: (device: BluetoothDevice) => void;\n  onError?: (error: Error) => void;\n}\n\nexport function BluetoothDeviceCard({\n  device,\n  onDeviceSelected,\n  onDeviceRemoved,\n  onError\n}: BluetoothDeviceCardProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [deviceInfo, setDeviceInfo] = useState<DeviceInformation | null>(null);\n  const [batteryLevel, setBatteryLevel] = useState<number | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingState, setLoadingState] = useState<{\n    deviceInfo: boolean;\n    battery: boolean;\n    characteristics: boolean;\n  }>({\n    deviceInfo: false,\n    battery: false,\n    characteristics: false\n  });\n  const bluetoothManager = BluetoothManager.getInstance();\n  const [subscribedCharacteristics, setSubscribedCharacteristics] = useState<Set<string>>(new Set());\n  const [lastUpdateTime, setLastUpdateTime] = useState<Date | null>(null);\n  const [errorState, setErrorState] = useState<{\n    deviceInfo: string | null;\n    battery: string | null;\n    characteristics: string | null;\n  }>({\n    deviceInfo: null,\n    battery: null,\n    characteristics: null\n  });\n\n  const isGattError = (error: any): boolean => {\n    return error instanceof Error &&\n      (error.message.includes('GATT operation already in progress') ||\n        error.message.includes('GATT Server is disconnected'));\n  };\n\n  const retryOperation = async <T,>(\n    operation: () => Promise<T>,\n    maxRetries: number = 3,\n    delay: number = 1000\n  ): Promise<T> => {\n    let lastError: Error | null = null;\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error('Unknown error');\n        if (!isGattError(error) || i === maxRetries - 1) {\n          throw lastError;\n        }\n        await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));\n      }\n    }\n    throw lastError;\n  };\n\n  // Load device information when device is connected\n  useEffect(() => {\n    const loadDeviceInfo = async () => {\n      if (device.isConnected && (!deviceInfo || !lastUpdateTime || Date.now() - lastUpdateTime.getTime() > 30000)) {\n        setIsLoading(true);\n        setLoadingState({\n          deviceInfo: true,\n          battery: true,\n          characteristics: true\n        });\n\n        try {\n          // Read all characteristics first\n          await retryOperation(async () => {\n            setLoadingState(prev => ({ ...prev, characteristics: true }));\n            await bluetoothManager.readAllCharacteristics(device);\n            setLoadingState(prev => ({ ...prev, characteristics: false }));\n          });\n\n          // Then get the specific information we want to display\n          const [info, battery] = await Promise.all([\n            retryOperation(async () => {\n              setLoadingState(prev => ({ ...prev, deviceInfo: true }));\n              const result = await bluetoothManager.readDeviceInformation(device);\n              setLoadingState(prev => ({ ...prev, deviceInfo: false }));\n              return result;\n            }),\n            retryOperation(async () => {\n              setLoadingState(prev => ({ ...prev, battery: true }));\n              const result = await bluetoothManager.readBatteryLevel(device);\n              setLoadingState(prev => ({ ...prev, battery: false }));\n              return result;\n            })\n          ]);\n\n          setDeviceInfo(info);\n          setBatteryLevel(battery);\n          setLastUpdateTime(new Date());\n          setErrorState({\n            deviceInfo: null,\n            battery: null,\n            characteristics: null\n          });\n        } catch (error) {\n          console.error('Failed to load device information:', error);\n          if (isGattError(error)) {\n            setErrorState({\n              deviceInfo: 'GATT operation failed. Please try again.',\n              battery: 'GATT operation failed. Please try again.',\n              characteristics: 'GATT operation failed. Please try again.'\n            });\n          } else {\n            onError?.(error instanceof Error ? error : new Error('Failed to load device information'));\n          }\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    loadDeviceInfo();\n  }, [device.isConnected, device.id]);\n\n  const refreshDeviceInfo = async () => {\n    if (!device.gatt) return;\n\n    setIsLoading(true);\n    setLoadingState({\n      deviceInfo: true,\n      battery: true,\n      characteristics: true\n    });\n\n    try {\n      // Read all characteristics first\n      await retryOperation(async () => {\n        setLoadingState(prev => ({ ...prev, characteristics: true }));\n        await bluetoothManager.readAllCharacteristics(device);\n        setLoadingState(prev => ({ ...prev, characteristics: false }));\n      });\n\n      // Then get the specific information we want to display\n      const [info, battery] = await Promise.all([\n        retryOperation(async () => {\n          setLoadingState(prev => ({ ...prev, deviceInfo: true }));\n          const result = await bluetoothManager.readDeviceInformation(device);\n          setLoadingState(prev => ({ ...prev, deviceInfo: false }));\n          return result;\n        }),\n        retryOperation(async () => {\n          setLoadingState(prev => ({ ...prev, battery: true }));\n          const result = await bluetoothManager.readBatteryLevel(device);\n          setLoadingState(prev => ({ ...prev, battery: false }));\n          return result;\n        })\n      ]);\n\n      setDeviceInfo(info);\n      setBatteryLevel(battery);\n      setLastUpdateTime(new Date());\n      setErrorState({\n        deviceInfo: null,\n        battery: null,\n        characteristics: null\n      });\n    } catch (error) {\n      console.error('Failed to refresh device information:', error);\n      if (isGattError(error)) {\n        setErrorState({\n          deviceInfo: 'GATT operation failed. Please try again.',\n          battery: 'GATT operation failed. Please try again.',\n          characteristics: 'GATT operation failed. Please try again.'\n        });\n      } else {\n        onError?.(error instanceof Error ? error : new Error('Failed to refresh device information'));\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleConnect = async () => {\n    try {\n      await bluetoothManager.connectToDevice(device.id);\n      onDeviceSelected?.(device);\n      // Device info will be loaded automatically by the useEffect\n    } catch (error) {\n      onError?.(error instanceof Error ? error : new Error('Failed to connect to device'));\n    }\n  };\n\n  const handleDisconnect = async () => {\n    try {\n      await bluetoothManager.disconnectDevice(device.id);\n      // Only refresh the specific device that was disconnected\n      await bluetoothManager.refreshDevices(device.id);\n    } catch (error) {\n      onError?.(error instanceof Error ? error : new Error('Failed to disconnect device'));\n    }\n  };\n\n  const handleRemove = async () => {\n    try {\n      await bluetoothManager.removeDevice(device.id);\n      onDeviceRemoved?.(device);\n    } catch (error) {\n      onError?.(error instanceof Error ? error : new Error('Failed to remove device'));\n    }\n  };\n\n  const isSubscribed = (serviceUuid: string, characteristicUuid: string) => {\n    return subscribedCharacteristics.has(`${serviceUuid}-${characteristicUuid}`);\n  };\n\n  const handleReadCharacteristic = async (serviceUuid: string, characteristicUuid: string) => {\n    if (!device.gatt) return;\n    try {\n      const value = await bluetoothManager.readCharacteristic(device, serviceUuid, characteristicUuid);\n      console.log(`Read value from ${characteristicUuid}:`, value);\n      // Update the UI with the new value\n      refreshDeviceInfo();\n    } catch (error) {\n      console.error('Failed to read characteristic:', error);\n      onError?.(error instanceof Error ? error : new Error('Failed to read characteristic'));\n    }\n  };\n\n  const handleWriteCharacteristic = async (serviceUuid: string, characteristicUuid: string) => {\n    if (!device.gatt) return;\n    try {\n      // TODO: Implement write dialog\n      console.log('Write to characteristic:', characteristicUuid);\n    } catch (error) {\n      console.error('Failed to write characteristic:', error);\n      onError?.(error instanceof Error ? error : new Error('Failed to write characteristic'));\n    }\n  };\n\n  const handleToggleNotifications = async (serviceUuid: string, characteristicUuid: string) => {\n    if (!device.gatt) return;\n    try {\n      const key = `${serviceUuid}-${characteristicUuid}`;\n      if (isSubscribed(serviceUuid, characteristicUuid)) {\n        await bluetoothManager.stopNotifications(device, serviceUuid, characteristicUuid);\n        setSubscribedCharacteristics(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(key);\n          return newSet;\n        });\n      } else {\n        await bluetoothManager.startNotifications(device, serviceUuid, characteristicUuid);\n        setSubscribedCharacteristics(prev => {\n          const newSet = new Set(prev);\n          newSet.add(key);\n          return newSet;\n        });\n      }\n    } catch (error) {\n      console.error('Failed to toggle notifications:', error);\n      onError?.(error instanceof Error ? error : new Error('Failed to toggle notifications'));\n    }\n  };\n\n  const getPropertyDescription = (prop: string): string => {\n    switch (prop.toLowerCase()) {\n      case 'read':\n        return 'This characteristic can be read';\n      case 'write':\n        return 'This characteristic can be written to';\n      case 'notify':\n        return 'This characteristic can send notifications';\n      case 'indicate':\n        return 'This characteristic can send indications';\n      case 'broadcast':\n        return 'This characteristic can broadcast';\n      case 'writewithoutresponse':\n        return 'This characteristic can be written to without response';\n      case 'authenticatedsignedwrites':\n        return 'This characteristic supports authenticated signed writes';\n      case 'extendedproperties':\n        return 'This characteristic has extended properties';\n      default:\n        return prop;\n    }\n  };\n\n  const formatCharacteristicValue = (value: DataView): string => {\n    try {\n      // Try to decode as UTF-8 text first\n      const text = new TextDecoder().decode(value);\n      if (text && !text.includes('\\u0000')) {\n        return text;\n      }\n    } catch (e) {\n      // If text decoding fails, try other formats\n    }\n\n    // If it's a single byte value (like battery level)\n    if (value.byteLength === 1) {\n      return value.getUint8(0).toString();\n    }\n\n    // If it's a 16-bit value\n    if (value.byteLength === 2) {\n      return value.getUint16(0, true).toString();\n    }\n\n    // If it's a 32-bit value\n    if (value.byteLength === 4) {\n      return value.getUint32(0, true).toString();\n    }\n\n    // If all else fails, show as hex\n    const bytes = new Uint8Array(value.buffer);\n    return Array.from(bytes)\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join(' ');\n  };\n\n  return (\n    <div className=\"flex flex-col space-y-2 p-4 border-b last:border-b-0\">\n      <div className=\"flex items-center justify-between space-y-2\">\n        <div className=\"flex flex-col items-start gap-1\">\n          <span className=\"font-medium\">\n            {device.name || 'Unknown Device'}\n          </span>\n          <span className=\"text-xs text-muted-foreground font-mono\">\n            {device.id}\n          </span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          \n\n          <BluetoothStatus  device={device}/>\n\n          {!device.isConnected && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={async () => {\n                try {\n                  await handleConnect();\n                  setIsExpanded(true);\n                } catch (error) {\n                  console.error('Failed to connect to device:', error);\n                }\n              }}\n              className=\"text-green-500 hover:text-green-700\"\n            >\n              <Wifi className=\"h-4 w-4\" />\n              <span>Connect</span>\n            </Button>\n          )}\n\n\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                {device.isConnected ? (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleDisconnect}\n                    className=\"text-red-500 hover:text-red-700\"\n                  >\n                    <WifiOff className=\"h-4 w-4\" />\n                    <span>Disconnect</span>\n                  </Button>\n                ) : (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleRemove}\n                    className=\"text-red-500 hover:text-red-700\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                    {/* <span>Remove</span> */}\n                  </Button>\n                )}\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>{device.isConnected ? 'Disconnect from device' : 'Remove device'}</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n\n          {device.isConnected && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsExpanded(!isExpanded)}\n            >\n              {isExpanded ? (\n                <ChevronUp className=\"h-4 w-4\" />\n              ) : (\n                <ChevronDown className=\"h-4 w-4\" />\n              )}\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {device.isConnected && isExpanded && (\n        <div className=\"space-y-4 pl-4 border-l\">\n          {batteryLevel !== null && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Battery className=\"h-4 w-4\" />\n                <span>Battery Level</span>\n                {loadingState.battery ? (\n                  <div className=\"ml-auto flex items-center gap-2\">\n                    <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                    <span className=\"text-muted-foreground\">Loading...</span>\n                  </div>\n                ) : (\n                  <span className=\"ml-auto font-medium\">{batteryLevel}%</span>\n                )}\n              </div>\n              {errorState.battery && (\n                <div className=\"text-xs text-red-500\">{errorState.battery}</div>\n              )}\n              <Progress value={batteryLevel} className=\"h-2\" />\n            </div>\n          )}\n\n          {deviceInfo && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Info className=\"h-4 w-4\" />\n                <span>Device Details</span>\n                {loadingState.deviceInfo ? (\n                  <div className=\"ml-auto flex items-center gap-2\">\n                    <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                    <span className=\"text-muted-foreground\">Loading...</span>\n                  </div>\n                ) : (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={refreshDeviceInfo}\n                    disabled={isLoading}\n                    className=\"ml-auto\"\n                  >\n                    <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n                  </Button>\n                )}\n              </div>\n              {errorState.deviceInfo && (\n                <div className=\"text-xs text-red-500\">{errorState.deviceInfo}</div>\n              )}\n              {lastUpdateTime && (\n                <div className=\"text-xs text-muted-foreground\">\n                  Last updated: {lastUpdateTime.toLocaleTimeString()}\n                </div>\n              )}\n              <div className=\"grid gap-2 text-sm\">\n                {deviceInfo.manufacturerName && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Manufacturer</span>\n                    <span>{deviceInfo.manufacturerName}</span>\n                  </div>\n                )}\n                {deviceInfo.modelNumber && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Model</span>\n                    <span>{deviceInfo.modelNumber}</span>\n                  </div>\n                )}\n                {deviceInfo.serialNumber && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Serial Number</span>\n                    <span>{deviceInfo.serialNumber}</span>\n                  </div>\n                )}\n                {deviceInfo.hardwareRevision && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Hardware Revision</span>\n                    <span>{deviceInfo.hardwareRevision}</span>\n                  </div>\n                )}\n                {deviceInfo.firmwareRevision && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Firmware Revision</span>\n                    <span>{deviceInfo.firmwareRevision}</span>\n                  </div>\n                )}\n                {deviceInfo.softwareRevision && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Software Revision</span>\n                    <span>{deviceInfo.softwareRevision}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {device.services && device.services.length > 0 && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Info className=\"h-4 w-4\" />\n                <span>Services & Characteristics</span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={refreshDeviceInfo}\n                  disabled={isLoading}\n                  className=\"ml-auto\"\n                >\n                  <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n                </Button>\n              </div>\n              <Accordion type=\"multiple\" className=\"w-full\">\n                {device.services.map((service) => (\n                  <AccordionItem key={service.uuid} value={service.uuid}>\n                    <AccordionTrigger className=\"text-sm py-2\">\n                    <span className=\"cursor-help\">\n                              {bluetoothManager.getServiceName(service.uuid) || service.uuid}\n                            </span>\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      <div className=\"space-y-2 pl-4\">\n                        {service.characteristics.map((char) => (\n                          <div key={char.uuid} className=\"text-sm text-muted-foreground\">\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"cursor-help\">\n                                {bluetoothManager.getCharacteristicName(char.uuid) || char.uuid}\n\n                              </span>\n                              <div className=\"flex items-center gap-2\">\n\n                                <div>\n                                  {bluetoothManager.getCharacteristicValue(char.uuid) ? (\n                                    <div className=\"text-xs text-muted-foreground\">\n                                      {formatCharacteristicValue(bluetoothManager.getCharacteristicValue(char.uuid)!)}\n                                    </div>\n                                  ) : null}\n                                </div>\n                                <div className=\"flex gap-1\">\n                                  {char.properties.map((prop) => (\n                                    <TooltipProvider key={prop}>\n                                      <Tooltip>\n                                        <TooltipTrigger asChild>\n                                          <span\n                                            className=\"px-1 py-0.5 text-xs rounded bg-muted cursor-help\"\n                                          >\n                                            {prop}\n                                          </span>\n                                        </TooltipTrigger>\n                                        <TooltipContent>\n                                          <p>{getPropertyDescription(prop)}</p>\n                                        </TooltipContent>\n                                      </Tooltip>\n                                    </TooltipProvider>\n                                  ))}\n                                </div>\n                                <div className=\"flex gap-1\">\n                                  {char.properties.includes('read') && (\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      className=\"h-6 px-2\"\n                                      onClick={() => handleReadCharacteristic(service.uuid, char.uuid)}\n                                    >\n                                      <RefreshCw className=\"h-4 w-4\" />test\n                                    </Button>\n                                  )}\n                                  {char.properties.includes('write') && (\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      className=\"h-6 px-2\"\n                                      onClick={() => handleWriteCharacteristic(service.uuid, char.uuid)}\n                                    >\n                                      Write\n                                    </Button>\n                                  )}\n                                  {char.properties.includes('notify') && (\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      className=\"h-6 px-2\"\n                                      onClick={() => handleToggleNotifications(service.uuid, char.uuid)}\n                                    >\n                                      {isSubscribed(service.uuid, char.uuid) ? 'Unsubscribe' : 'Subscribe'}\n                                    </Button>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                            {char.value && (\n                              <div className=\"text-xs mt-1 flex items-center gap-2\">\n                                <span>Value:</span>\n                                <code className=\"bg-muted px-2 py-1 rounded\">\n                                  {formatCharacteristicValue(char.value)}\n                                </code>\n                                {char.lastUpdated && (\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    (Updated: {new Date(char.lastUpdated).toLocaleTimeString()})\n                                  </span>\n                                )}\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </AccordionContent>\n                  </AccordionItem>\n                ))}\n              </Accordion>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/bluetooth/bluetooth-device-information.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/registry/new-york/ui/card\";\nimport { BluetoothManager, BluetoothDevice, DeviceInformation } from \"./utils\";\nimport { Battery, Info, RefreshCw } from \"lucide-react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Progress } from \"@radix-ui/react-progress\";\n\ninterface BluetoothDeviceInformationProps {\n  device: BluetoothDevice;\n}\n\nexport function BluetoothDeviceInformation({ device }: BluetoothDeviceInformationProps) {\n  const [deviceInfo, setDeviceInfo] = useState<DeviceInformation | null>(null);\n  const [batteryLevel, setBatteryLevel] = useState<number | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const bluetoothManager = BluetoothManager.getInstance();\n\n  const refreshDeviceInfo = async () => {\n    if (!device.gatt) return;\n    \n    setIsLoading(true);\n    try {\n      const [info, battery] = await Promise.all([\n        bluetoothManager.readDeviceInformation(device),\n        bluetoothManager.readBatteryLevel(device)\n      ]);\n      setDeviceInfo(info);\n      setBatteryLevel(battery);\n    } catch (error) {\n      console.error('Failed to refresh device information:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    refreshDeviceInfo();\n  }, [device]);\n\n  if (!device.gatt) {\n    return null;\n  }\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">Device Information</CardTitle>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={refreshDeviceInfo}\n          disabled={isLoading}\n        >\n          <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n        </Button>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {batteryLevel !== null && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Battery className=\"h-4 w-4\" />\n                <span>Battery Level</span>\n                <span className=\"ml-auto font-medium\">{batteryLevel}%</span>\n              </div>\n              <Progress value={batteryLevel} className=\"h-2\" />\n            </div>\n          )}\n\n          {deviceInfo && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Info className=\"h-4 w-4\" />\n                <span>Device Details</span>\n              </div>\n              <div className=\"grid gap-2 text-sm\">\n                {deviceInfo.manufacturerName && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Manufacturer</span>\n                    <span>{deviceInfo.manufacturerName}</span>\n                  </div>\n                )}\n                {deviceInfo.modelNumber && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Model</span>\n                    <span>{deviceInfo.modelNumber}</span>\n                  </div>\n                )}\n                {deviceInfo.serialNumber && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Serial Number</span>\n                    <span>{deviceInfo.serialNumber}</span>\n                  </div>\n                )}\n                {deviceInfo.hardwareRevision && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Hardware Revision</span>\n                    <span>{deviceInfo.hardwareRevision}</span>\n                  </div>\n                )}\n                {deviceInfo.firmwareRevision && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Firmware Revision</span>\n                    <span>{deviceInfo.firmwareRevision}</span>\n                  </div>\n                )}\n                {deviceInfo.softwareRevision && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Software Revision</span>\n                    <span>{deviceInfo.softwareRevision}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n} ",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/bluetooth/bluetooth-device-list.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/registry/new-york/ui/card\";\nimport { ScrollArea } from \"@/registry/new-york/ui/scroll-area\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/registry/new-york/ui/select\";\nimport { BluetoothManager, BluetoothDevice } from \"./utils\";\nimport { BluetoothDeviceCard } from \"./bluetooth-device-card\";\nimport { BluetoothToolbar } from \"./bluetooth-toolbar\";\nimport { AlertCircle } from \"lucide-react\";\nimport { BluetoothDeviceInformation } from \"./bluetooth-device-information\";\n\ntype DeviceFilter = \"all\" | \"connected\" | \"paired\";\n\ninterface BluetoothDeviceListProps {\n  onDeviceSelected?: (device: BluetoothDevice) => void;\n  onDeviceRemoved?: (device: BluetoothDevice) => void;\n  onError?: (error: Error) => void;\n}\n\nexport function BluetoothDeviceList({\n  onDeviceSelected,\n  onDeviceRemoved,\n  onError\n}: BluetoothDeviceListProps) {\n  const [devices, setDevices] = useState<BluetoothDevice[]>([]);\n  const [isAvailable, setIsAvailable] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [filter, setFilter] = useState<DeviceFilter>(\"all\");\n  const bluetoothManager = BluetoothManager.getInstance();\n\n  useEffect(() => {\n    const checkAvailability = async () => {\n      try {\n        const available = await bluetoothManager.isBluetoothAvailable();\n        setIsAvailable(available);\n        if (!available) {\n          setError(\"Bluetooth is not available on this device\");\n        }\n      } catch (err) {\n        const error = err instanceof Error ? err : new Error(\"Failed to check Bluetooth availability\");\n        setError(error.message);\n        onError?.(error);\n      }\n    };\n\n    checkAvailability();\n  }, []);\n\n  useEffect(() => {\n    const handleDevicesChanged = (newDevices: BluetoothDevice[]) => {\n      setDevices([...newDevices]);\n    };\n\n    const handleError = (error: Error) => {\n      setError(error.message);\n      onError?.(error);\n    };\n\n    bluetoothManager.addListener('devicesChanged', handleDevicesChanged);\n    bluetoothManager.addListener('error', handleError);\n\n    // Load initial devices\n    const initialDevices = bluetoothManager.getDevices();\n    setDevices(initialDevices);\n\n    return () => {\n      bluetoothManager.removeListener('devicesChanged', handleDevicesChanged);\n      bluetoothManager.removeListener('error', handleError);\n    };\n  }, []);\n\n  const filteredDevices = devices.filter(device => {\n    switch (filter) {\n      case \"connected\":\n        return device.isConnected;\n      case \"paired\":\n        return !device.isConnected;\n      default:\n        return true;\n    }\n  });\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Bluetooth Devices</CardTitle>\n          <div className=\"flex items-center gap-2\">\n            <Select value={filter} onValueChange={(value: DeviceFilter) => setFilter(value)}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Filter devices\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Devices</SelectItem>\n                <SelectItem value=\"connected\">Connected</SelectItem>\n                <SelectItem value=\"paired\">Paired</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <BluetoothToolbar\n          onError={onError}\n          onScanStart={() => setError(null)}\n          onScanStop={() => setError(null)}\n        />\n\n        {error && (\n          <div className=\"flex items-center gap-2 text-sm text-red-500\">\n            <AlertCircle className=\"h-4 w-4\" />\n            {error}\n          </div>\n        )}\n\n        {filteredDevices.length > 0 ? (\n          <div className=\"space-y-2\">\n            {filteredDevices.map((device) => (\n              <div key={device.id} className=\"space-y-4\">\n                <BluetoothDeviceCard\n                  device={device}\n                  onDeviceSelected={onDeviceSelected}\n                  onDeviceRemoved={onDeviceRemoved}\n                  onError={onError}\n                />\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center text-muted-foreground py-4\">\n            {devices.length === 0 ? \"No devices paired yet\" : \"No devices match the current filter\"}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n} ",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/bluetooth/bluetooth-log-console.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/registry/new-york/ui/card\";\nimport { ScrollArea } from \"@/registry/new-york/ui/scroll-area\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { BluetoothManager, BluetoothDevice, Service, Characteristic } from \"./utils\";\nimport { AlertCircle, Battery, Bluetooth, BluetoothConnected, BluetoothOff, ChevronDown, ChevronUp, Info, RefreshCw, Trash2, Wifi, WifiOff } from \"lucide-react\";\n\ntype LogType = \"info\" | \"error\" | \"data\" | \"event\" | \"connection\" | \"service\" | \"characteristic\" | \"connectionError\" | \"serviceError\" | \"characteristicError\" | \"scanError\" | \"disconnectError\" | \"removeError\";\n\ninterface LogEntry {\n  timestamp: string;\n  type: LogType;\n  message: string;\n  data?: any;\n}\n\nexport function BluetoothLogConsole() {\n  const [logs, setLogs] = useState<LogEntry[]>([]);\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const bluetoothManager = BluetoothManager.getInstance();\n\n  const addLog = (type: LogEntry[\"type\"], message: string, data?: any) => {\n    const timestamp = new Date().toLocaleTimeString();\n    console.log(\"Adding log:\", { timestamp, type, message, data });\n    setLogs(prev => [...prev, { timestamp, type, message, data }]);\n  };\n\n  useEffect(() => {\n    const handleDevicesChanged = (devices: BluetoothDevice[]) => {\n      addLog(\"event\", \"Devices list updated\", devices);\n    };\n\n    const handleDeviceConnected = (device: BluetoothDevice) => {\n      addLog(\"connection\", `Device connected: ${device.name || device.id}`, device);\n    };\n\n    const handleDeviceDisconnected = (device: BluetoothDevice) => {\n      addLog(\"connection\", `Device disconnected: ${device.name || device.id}`, device);\n    };\n\n    const handleError = (error: Error) => {\n      addLog(\"error\", error.message, error);\n    };\n\n    const handleScanError = (error: Error) => {\n      addLog(\"scanError\", `Scan error: ${error.message}`, error);\n    };\n\n    const handleConnectError = (error: Error) => {\n      addLog(\"connectionError\", `Connection error: ${error.message}`, error);\n    };\n\n    const handleDisconnectError = (error: Error) => {\n      addLog(\"disconnectError\", `Disconnection error: ${error.message}`, error);\n    };\n\n    const handleRemoveError = (error: Error) => {\n      addLog(\"removeError\", `Remove error: ${error.message}`, error);\n    };\n\n    const handleServiceDiscovered = (service: Service) => {\n      addLog(\"service\", `Service discovered: ${service.name}`, service);\n    };\n\n    const handleCharacteristicRead = (characteristic: Characteristic) => {\n      addLog(\"characteristic\", `Characteristic read: ${characteristic.name}`, characteristic);\n    };\n\n    const handleCharacteristicWrite = (characteristic: Characteristic) => {\n      addLog(\"characteristic\", `Characteristic write: ${characteristic.name}`, characteristic);\n    };\n\n    const handleServiceError = (error: Error) => {\n      addLog(\"serviceError\", `Service error: ${error.message}`, error);\n    };\n\n    const handleCharacteristicError = (error: Error) => {\n      addLog(\"characteristicError\", `Characteristic error: ${error.message}`, error);\n    };\n\n    bluetoothManager.addListener('devicesChanged', handleDevicesChanged);\n    bluetoothManager.addListener('deviceConnected', handleDeviceConnected);\n    bluetoothManager.addListener('deviceDisconnected', handleDeviceDisconnected);\n    bluetoothManager.addListener('error', handleError);\n    bluetoothManager.addListener('scanError', handleScanError);\n    bluetoothManager.addListener('connectError', handleConnectError);\n    bluetoothManager.addListener('disconnectError', handleDisconnectError);\n    bluetoothManager.addListener('removeError', handleRemoveError);\n    bluetoothManager.addListener('serviceDiscovered', handleServiceDiscovered);\n    bluetoothManager.addListener('characteristicRead', handleCharacteristicRead);\n    bluetoothManager.addListener('characteristicWrite', handleCharacteristicWrite);\n    bluetoothManager.addListener('serviceError', handleServiceError);\n    bluetoothManager.addListener('characteristicError', handleCharacteristicError);\n\n    return () => {\n      bluetoothManager.removeListener('devicesChanged', handleDevicesChanged);\n      bluetoothManager.removeListener('deviceConnected', handleDeviceConnected);\n      bluetoothManager.removeListener('deviceDisconnected', handleDeviceDisconnected);\n      bluetoothManager.removeListener('error', handleError);\n      bluetoothManager.removeListener('scanError', handleScanError);\n      bluetoothManager.removeListener('connectError', handleConnectError);\n      bluetoothManager.removeListener('disconnectError', handleDisconnectError);\n      bluetoothManager.removeListener('removeError', handleRemoveError);\n      bluetoothManager.removeListener('serviceDiscovered', handleServiceDiscovered);\n      bluetoothManager.removeListener('characteristicRead', handleCharacteristicRead);\n      bluetoothManager.removeListener('characteristicWrite', handleCharacteristicWrite);\n      bluetoothManager.removeListener('serviceError', handleServiceError);\n      bluetoothManager.removeListener('characteristicError', handleCharacteristicError);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isAutoScroll && scrollAreaRef.current) {\n      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;\n    }\n  }, [logs, isAutoScroll]);\n\n  const clearLogs = () => {\n    setLogs([]);\n  };\n\n  const getLogColor = (type: LogEntry[\"type\"]) => {\n    switch (type) {\n      case \"error\":\n      case \"connectionError\":\n      case \"serviceError\":\n      case \"characteristicError\":\n      case \"scanError\":\n      case \"disconnectError\":\n      case \"removeError\":\n        return \"text-red-500\";\n      case \"info\":\n        return \"text-blue-500\";\n      case \"data\":\n        return \"text-green-500\";\n      case \"event\":\n        return \"text-purple-500\";\n      case \"connection\":\n        return \"text-orange-500\";\n      case \"service\":\n        return \"text-indigo-500\";\n      case \"characteristic\":\n        return \"text-teal-500\";\n      default:\n        return \"text-foreground\";\n    }\n  };\n\n  const getLogIcon = (type: LogEntry[\"type\"]) => {\n    switch (type) {\n      case \"error\":\n      case \"connectionError\":\n      case \"serviceError\":\n      case \"characteristicError\":\n      case \"scanError\":\n      case \"disconnectError\":\n      case \"removeError\":\n        return <AlertCircle className=\"h-4 w-4\" />;\n      case \"info\":\n        return <Info className=\"h-4 w-4\" />;\n      case \"data\":\n        return <BluetoothConnected className=\"h-4 w-4\" />;\n      case \"event\":\n        return <Bluetooth className=\"h-4 w-4\" />;\n      case \"connection\":\n        return <Wifi className=\"h-4 w-4\" />;\n      case \"service\":\n        return <Battery className=\"h-4 w-4\" />;\n      case \"characteristic\":\n        return <BluetoothOff className=\"h-4 w-4\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">Bluetooth Log Console</CardTitle>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsAutoScroll(!isAutoScroll)}\n            className={isAutoScroll ? \"text-blue-500\" : \"\"}\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={clearLogs}\n            className=\"text-red-500 hover:text-red-700\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ScrollArea\n          ref={scrollAreaRef}\n          className=\"h-[300px] rounded-md border p-4 font-mono text-sm\"\n        >\n          {logs.map((log, index) => (\n            <div key={index} className=\"flex items-start gap-2 py-1\">\n              <span className=\"text-muted-foreground\">{log.timestamp}</span>\n              <span className={getLogColor(log.type)}>\n                {getLogIcon(log.type)}\n              </span>\n              <span className={getLogColor(log.type)}>{log.message}</span>\n              {log.data && (\n                <pre className=\"text-muted-foreground\">\n                  {JSON.stringify(log.data, null, 2)}\n                </pre>\n              )}\n            </div>\n          ))}\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n} ",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/bluetooth/bluetooth-status.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { BluetoothManager, BluetoothDevice } from \"./utils\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/registry/new-york/ui/tooltip\";\nimport { Bluetooth, BluetoothOff, BluetoothSearching, BluetoothConnected } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ntype SizePreset = 2 | 3 | 4 | 5 | 6 | 8 | 10 | 12;\n\nconst sizeClasses: Record<SizePreset, string> = {\n  2: \"w-2 h-2\",\n  3: \"w-3 h-3\",\n  4: \"w-4 h-4\",\n  5: \"w-5 h-5\",\n  6: \"w-6 h-6\",\n  8: \"w-8 h-8\",\n  10: \"w-10 h-10\",\n  12: \"w-12 h-12\"\n};\n\ninterface BluetoothStatusColors {\n  notAvailable?: string;\n  available?: string;\n  scanning?: string;\n  connected?: string;\n}\n\ninterface BluetoothStatusProps {\n  size?: SizePreset;\n  colors?: BluetoothStatusColors;\n  showLegend?: boolean;\n  device?: BluetoothDevice;\n}\n\nconst defaultColors: BluetoothStatusColors = {\n  notAvailable: \"text-destructive\",\n  available: \"text-blue-300\",\n  scanning: \"text-blue-400\",\n  connected: \"text-green-500\"\n};\n\nconst statusLegend = [\n  { icon: BluetoothOff, color: \"text-destructive\", text: \"Not Available\" },\n  { icon: Bluetooth, color: \"text-blue-300\", text: \"Available\" },\n  { icon: BluetoothSearching, color: \"text-blue-400\", text: \"Scanning\" },\n  { icon: BluetoothConnected, color: \"text-green-500\", text: \"Connected\" }\n];\n\nexport function BluetoothStatus({ \n  size = 4, \n  colors = defaultColors,\n  showLegend = false,\n  device\n}: BluetoothStatusProps) {\n  const [isAvailable, setIsAvailable] = useState<boolean>(false);\n  const [isConnected, setIsConnected] = useState<boolean>(false);\n  const [isScanning, setIsScanning] = useState<boolean>(false);\n\n  const bluetoothManager = BluetoothManager.getInstance();\n\n  useEffect(() => {\n    // Initial status check\n    setIsAvailable(bluetoothManager.isBluetoothAvailable());\n    if (device) {\n      setIsConnected(device.isConnected);\n    } else {\n      const devices = bluetoothManager.getDevices();\n      setIsConnected(devices.some(device => device.isConnected));\n    }\n\n    // Listen for status changes\n    const handleDevicesChanged = (devices: any[]) => {\n      if (device) {\n        const updatedDevice = devices.find(d => d.id === device.id);\n        setIsConnected(updatedDevice?.isConnected ?? false);\n      } else {\n        setIsConnected(devices.some(device => device.isConnected));\n      }\n    };\n\n    const handleDeviceConnected = (connectedDevice: BluetoothDevice) => {\n      if (!device || device.id === connectedDevice.id) {\n        setIsConnected(true);\n      }\n    };\n\n    const handleDeviceDisconnected = (disconnectedDevice: BluetoothDevice) => {\n      if (!device || device.id === disconnectedDevice.id) {\n        setIsConnected(false);\n      }\n    };\n\n    bluetoothManager.addListener('devicesChanged', handleDevicesChanged);\n    bluetoothManager.addListener('deviceConnected', handleDeviceConnected);\n    bluetoothManager.addListener('deviceDisconnected', handleDeviceDisconnected);\n\n    return () => {\n      bluetoothManager.removeListener('devicesChanged', handleDevicesChanged);\n      bluetoothManager.removeListener('deviceConnected', handleDeviceConnected);\n      bluetoothManager.removeListener('deviceDisconnected', handleDeviceDisconnected);\n    };\n  }, [device]);\n\n  // Determine icon and status text based on status\n  const getStatusInfo = () => {\n    if (!isAvailable) return { \n      text: \"Bluetooth not available\",\n      icon: BluetoothOff,\n      className: colors.notAvailable || defaultColors.notAvailable\n    };\n    if (isScanning) return { \n      text: \"Scanning for devices\",\n      icon: BluetoothSearching,\n      className: colors.scanning || defaultColors.scanning\n    };\n    if (isConnected) return { \n      text: device ? \"Device connected\" : \"Connected to device\",\n      icon: BluetoothConnected,\n      className: colors.connected || defaultColors.connected\n    };\n    return { \n      text: device ? \"Device not connected\" : \"Available but not connected\",\n      icon: Bluetooth,\n      className: colors.available || defaultColors.available\n    };\n  };\n\n  const status = getStatusInfo();\n  const Icon = status.icon;\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <div className=\"flex items-center\">\n          <Icon className={cn(sizeClasses[size], status.className)} />\n          </div>\n        </TooltipTrigger>\n        <TooltipContent className={cn(\"space-y-2\", showLegend ? \"py-2\" : \" pb-1\")}>\n          <p className=\"font-medium\">{status.text}</p>\n          {showLegend && (\n            <div className=\"space-y-1\">\n              <p className=\"text-xs text-muted-foreground\">Legend:</p>\n              <div className=\"grid grid-cols-2 gap-1\">\n                {statusLegend.map((item) => {\n                  const Icon = item.icon;\n                  return (\n                    <div key={item.text} className=\"flex items-center gap-1\">\n                      <Icon className={cn(\"w-3 h-3\", item.color)} />\n                      <span className=\"text-xs\">{item.text}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/bluetooth/bluetooth-toolbar.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/registry/new-york/ui/tooltip\";\nimport { BluetoothManager } from \"./utils\";\nimport { Bluetooth, BluetoothConnected, BluetoothOff, RefreshCw, Scan } from \"lucide-react\";\n\ninterface BluetoothToolbarProps {\n  onError?: (error: Error) => void;\n  onScanStart?: () => void;\n  onScanStop?: () => void;\n}\n\nexport function BluetoothToolbar({\n  onError,\n  onScanStart,\n  onScanStop\n}: BluetoothToolbarProps) {\n  const [isScanning, setIsScanning] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const bluetoothManager = BluetoothManager.getInstance();\n\n  const handleScan = async () => {\n    try {\n      setIsScanning(true);\n      onScanStart?.();\n      await bluetoothManager.scanForDevices();\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error(\"Failed to scan for devices\");\n      onError?.(error);\n    } finally {\n      setIsScanning(false);\n      onScanStop?.();\n    }\n  };\n\n  const handleRefresh = async () => {\n    try {\n      setIsRefreshing(true);\n      await bluetoothManager.refreshDevices();\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error(\"Failed to refresh devices\");\n      onError?.(error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  const handleDisconnectAll = async () => {\n    try {\n      const devices = bluetoothManager.getDevices();\n      for (const device of devices) {\n        if (device.isConnected) {\n          await bluetoothManager.disconnectDevice(device.id);\n        }\n      }\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error(\"Failed to disconnect devices\");\n      onError?.(error);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-between p-2 border rounded-md\">\n      <div className=\"flex items-center gap-2\">\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={handleScan}\n                disabled={isScanning}\n              >\n                <Scan className={`h-4 w-4 ${isScanning ? \"animate-spin\" : \"\"}`} />\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>Scan for devices</p>\n            </TooltipContent>\n          </Tooltip>\n\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={handleRefresh}\n                disabled={isRefreshing}\n              >\n                <RefreshCw className={`h-4 w-4 ${isRefreshing ? \"animate-spin\" : \"\"}`} />\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>Refresh device list</p>\n            </TooltipContent>\n          </Tooltip>\n\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={handleDisconnectAll}\n              >\n                <BluetoothOff className=\"h-4 w-4\" />\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>Disconnect all devices</p>\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      </div>\n      <div className=\"flex items-center gap-2\">\n        {bluetoothManager.getDevices().filter(device => device.isConnected).length > 0 && (\n          <span className=\"text-sm text-muted-foreground\">\n            {bluetoothManager.getDevices().filter(device => device.isConnected).length} device{bluetoothManager.getDevices().filter(device => device.isConnected).length !== 1 ? 's' : ''} connected\n          </span>\n        )}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}